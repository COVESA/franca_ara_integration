/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/genivi/aasr/showcase/IDrivingLaneSomeIPStubAdapter.hpp>
#include <v1/genivi/aasr/showcase/IDrivingLane.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

std::shared_ptr<CommonAPI::SomeIP::StubAdapter> createIDrivingLaneSomeIPStubAdapter(
                   const CommonAPI::SomeIP::Address &_address,
                   const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared< IDrivingLaneSomeIPStubAdapter<::v1::genivi::aasr::showcase::IDrivingLaneStub>>(_address, _connection, _stub);
}

void initializeIDrivingLaneSomeIPStubAdapter() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:genivi.aasr.showcase.IDrivingLane:v1_0:drivinglane",
         0x536, 0xd431, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerStubAdapterCreateMethod(
        IDrivingLane::getInterface(),
        &createIDrivingLaneSomeIPStubAdapter);
}

INITIALIZER(registerIDrivingLaneSomeIPStubAdapter) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeIDrivingLaneSomeIPStubAdapter);
}
} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1
