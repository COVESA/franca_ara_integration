/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GENIVI_AASR_SHOWCASE_I_Vehicles_PROXY_HPP_
#define V1_GENIVI_AASR_SHOWCASE_I_Vehicles_PROXY_HPP_

#include <v1/genivi/aasr/showcase/IVehiclesProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

template <typename ... _AttributeExtensions>
class IVehiclesProxy
    : virtual public IVehicles,
      virtual public IVehiclesProxyBase,
      virtual public _AttributeExtensions... {
public:
    IVehiclesProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~IVehiclesProxy();

    typedef IVehicles InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute Vehicles.
     */
    virtual VehiclesAttribute& getVehiclesAttribute() {
        return delegate_->getVehiclesAttribute();
    }


    /**
     * Calls SetFloatingPointPrecision with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetFloatingPointPrecision(const IVehicles::FloatingPointPrecision &_precision, CommonAPI::CallStatus &_internalCallStatus, bool &_rv, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetFloatingPointPrecision with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetFloatingPointPrecisionAsync(const IVehicles::FloatingPointPrecision &_precision, SetFloatingPointPrecisionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< IVehiclesProxyBase> delegate_;
};

typedef IVehiclesProxy<> IVehiclesProxyDefault;

namespace IVehiclesExtensions {
    template <template <typename > class _ExtensionType>
    class VehiclesAttributeExtension {
     public:
        typedef _ExtensionType< IVehiclesProxyBase::VehiclesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< IVehiclesProxyBase::VehiclesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VehiclesAttributeExtension(IVehiclesProxyBase& proxy): attributeExtension_(proxy.getVehiclesAttribute()) {
        }
    
        inline extension_type& getVehiclesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace IVehiclesExtensions

//
// IVehiclesProxy Implementation
//
template <typename ... _AttributeExtensions>
IVehiclesProxy<_AttributeExtensions...>::IVehiclesProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< IVehiclesProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< IVehiclesProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
IVehiclesProxy<_AttributeExtensions...>::~IVehiclesProxy() {
}

template <typename ... _AttributeExtensions>
void IVehiclesProxy<_AttributeExtensions...>::SetFloatingPointPrecision(const IVehicles::FloatingPointPrecision &_precision, CommonAPI::CallStatus &_internalCallStatus, bool &_rv, const CommonAPI::CallInfo *_info) {
    if (!_precision.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetFloatingPointPrecision(_precision, _internalCallStatus, _rv, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IVehiclesProxy<_AttributeExtensions...>::SetFloatingPointPrecisionAsync(const IVehicles::FloatingPointPrecision &_precision, SetFloatingPointPrecisionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_precision.validate()) {
        bool rv = false;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, rv);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetFloatingPointPrecisionAsync(_precision, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &IVehiclesProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool IVehiclesProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool IVehiclesProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& IVehiclesProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& IVehiclesProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::genivi::aasr::showcase::IVehiclesProxy,
    _AttributeExtension> {
    typedef typename ::v1::genivi::aasr::showcase::IVehiclesProxy<
            ::v1::genivi::aasr::showcase::IVehiclesExtensions::VehiclesAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GENIVI_AASR_SHOWCASE_I_Vehicles_PROXY_HPP_
