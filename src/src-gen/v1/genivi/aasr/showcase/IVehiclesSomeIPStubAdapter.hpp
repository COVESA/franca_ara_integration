/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GENIVI_AASR_SHOWCASE_I_VEHICLES_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GENIVI_AASR_SHOWCASE_I_VEHICLES_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/genivi/aasr/showcase/IVehiclesStub.hpp>
#include <v1/genivi/aasr/showcase/IVehiclesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

template <typename _Stub = ::v1::genivi::aasr::showcase::IVehiclesStub, typename... _Stubs>
class IVehiclesSomeIPStubAdapterInternal
    : public virtual IVehiclesStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> IVehiclesSomeIPStubAdapterHelper;

    ~IVehiclesSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        IVehiclesSomeIPStubAdapterHelper::deinit();
    }

    void fireVehiclesAttributeChanged(const ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::genivi::aasr::showcase::IVehiclesStub,
        CommonAPI::Version
    > getIVehiclesInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::genivi::aasr::showcase::IVehiclesStub,
        ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles,
        ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t
    > getVehiclesAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::genivi::aasr::showcase::IVehiclesStub,
        ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles,
        ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t
    > setVehiclesAttributeStubDispatcher;

    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::genivi::aasr::showcase::IVehiclesStub,
        std::tuple< IVehicles::FloatingPointPrecision>,
        std::tuple< bool>,
        std::tuple< ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t>,
        std::tuple< CommonAPI::EmptyDeployment>
    > setFloatingPointPrecisionStubDispatcher;

    IVehiclesSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        IVehiclesSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< IVehiclesStub>(_stub))
    {

                IVehiclesSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbb9) }, &getVehiclesAttributeStubDispatcher );
                IVehiclesSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbba) }, &setVehiclesAttributeStubDispatcher );
        
                IVehiclesSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x80e8) }, &setFloatingPointPrecisionStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xbb8), itsEventGroups, true);
            fireVehiclesAttributeChanged(std::dynamic_pointer_cast< ::v1::genivi::aasr::showcase::IVehiclesStub>(_stub)->getVehiclesAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::genivi::aasr::showcase::IVehiclesStub,
    CommonAPI::Version
    > IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>::getIVehiclesInterfaceVersionStubDispatcher(&IVehiclesStub::lockInterfaceVersionAttribute, &IVehiclesStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::genivi::aasr::showcase::IVehiclesStub,
    ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles,
    ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t
> IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>::getVehiclesAttributeStubDispatcher(
    &IVehiclesStub::lockVehiclesAttribute,
    &IVehiclesStub::getVehiclesAttribute, true);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::genivi::aasr::showcase::IVehiclesStub,
    ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles,
    ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t
> IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>::setVehiclesAttributeStubDispatcher(
    &IVehiclesStub::lockVehiclesAttribute,
    &IVehiclesStub::getVehiclesAttribute,
    &IVehiclesStubRemoteEvent::onRemoteSetVehiclesAttribute,
    &IVehiclesStubRemoteEvent::onRemoteVehiclesAttributeChanged,
    &IVehiclesStubAdapter::fireVehiclesAttributeChanged,
    true
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::genivi::aasr::showcase::IVehiclesStub,
    std::tuple< IVehicles::FloatingPointPrecision>,
    std::tuple< bool>,
    std::tuple< ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t>,
    std::tuple< CommonAPI::EmptyDeployment>
> IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>::setFloatingPointPrecisionStubDispatcher(
    &IVehiclesStub::SetFloatingPointPrecision,
    true,
    std::make_tuple(static_cast< ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireVehiclesAttributeChanged(const ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles& value) {
    CommonAPI::Deployable< ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles, ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t> deployedValue(value, static_cast< ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::genivi::aasr::showcase::IVehicles::ListOfVehicles,
                ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0xbb8),
        true,
        deployedValue
    );
}

template <typename _Stub = ::v1::genivi::aasr::showcase::IVehiclesStub, typename... _Stubs>
class IVehiclesSomeIPStubAdapter
    : public IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< IVehiclesSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    IVehiclesSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          IVehiclesSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1

#endif // V1_GENIVI_AASR_SHOWCASE_I_Vehicles_SOMEIP_STUB_ADAPTER_HPP_
