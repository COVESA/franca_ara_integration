/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/genivi/aasr/showcase/IDrivingLaneStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

IDrivingLaneStubDefault::IDrivingLaneStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(IDrivingLane::getInterfaceVersion()) {
}

const CommonAPI::Version& IDrivingLaneStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

IDrivingLaneStubRemoteEvent* IDrivingLaneStubDefault::initStubAdapter(const std::shared_ptr< IDrivingLaneStubAdapter> &_adapter) {
    CommonAPI::Stub<IDrivingLaneStubAdapter, IDrivingLaneStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}



void IDrivingLaneStubDefault::fireLaneDetectedEvent(const ::v1::genivi::aasr::showcase::IDrivingLane::LaneType &_drivingLane) {
    IDrivingLaneStub::fireLaneDetectedEvent(_drivingLane);
}


IDrivingLaneStubDefault::RemoteEventHandler::RemoteEventHandler(IDrivingLaneStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1
