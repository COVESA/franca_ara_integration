/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/genivi/aasr/showcase/IVehiclesSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createIVehiclesSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< IVehiclesSomeIPProxy>(_address, _connection);
}

void initializeIVehiclesSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:genivi.aasr.showcase.IVehicles:v1_0:test",
        0x537, 0x5678, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         IVehicles::getInterface(),
         &createIVehiclesSomeIPProxy);
}

INITIALIZER(registerIVehiclesSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeIVehiclesSomeIPProxy);
}

IVehiclesSomeIPProxy::IVehiclesSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          vehicles_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0xbb8), CommonAPI::SomeIP::method_id_t(0xbb9), false, false, CommonAPI::SomeIP::method_id_t(0xbba), false, static_cast< ::v1::genivi::aasr::showcase::IVehicles_::ListOfVehiclesDeployment_t* >(nullptr))
    {
    }

    IVehiclesSomeIPProxy::VehiclesAttribute& IVehiclesSomeIPProxy::getVehiclesAttribute() {
        return vehicles_;
    }


        void IVehiclesSomeIPProxy::SetFloatingPointPrecision(const IVehicles::FloatingPointPrecision &_precision, CommonAPI::CallStatus &_internalCallStatus, bool &_rv, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< IVehicles::FloatingPointPrecision, ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t> deploy_precision(_precision, static_cast< ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t* >(nullptr));
            CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_rv(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        IVehicles::FloatingPointPrecision,
                        ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        bool,
                        CommonAPI::EmptyDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x80e8),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_precision,
    _internalCallStatus,
    deploy_rv);
    _rv = deploy_rv.getValue();
    }
    std::future<CommonAPI::CallStatus> IVehiclesSomeIPProxy::SetFloatingPointPrecisionAsync(const IVehicles::FloatingPointPrecision &_precision, SetFloatingPointPrecisionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< IVehicles::FloatingPointPrecision, ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t> deploy_precision(_precision, static_cast< ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t* >(nullptr));
        CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_rv(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    IVehicles::FloatingPointPrecision,
                    ::v1::genivi::aasr::showcase::IVehicles_::FloatingPointPrecisionDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    bool,
                    CommonAPI::EmptyDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x80e8),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_precision,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _rv) {
                if (_callback)
                    _callback(_internalCallStatus, _rv.getValue());
            },
            std::make_tuple(deploy_rv));
    }



    void IVehiclesSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1
