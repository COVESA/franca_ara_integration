/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/genivi/aasr/showcase/IDrivingLaneSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createIDrivingLaneSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< IDrivingLaneSomeIPProxy>(_address, _connection);
}

void initializeIDrivingLaneSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:genivi.aasr.showcase.IDrivingLane:v1_0:drivinglane",
        0x536, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         IDrivingLane::getInterface(),
         &createIDrivingLaneSomeIPProxy);
}

INITIALIZER(registerIDrivingLaneSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeIDrivingLaneSomeIPProxy);
}

IDrivingLaneSomeIPProxy::IDrivingLaneSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          laneDetected_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x1), false, false, std::make_tuple(static_cast< ::v1::genivi::aasr::showcase::IDrivingLane_::LaneTypeDeployment_t* >(nullptr)))
    {
    }


    IDrivingLaneSomeIPProxy::LaneDetectedEvent& IDrivingLaneSomeIPProxy::getLaneDetectedEvent() {
        return laneDetected_;
    }




    void IDrivingLaneSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1
