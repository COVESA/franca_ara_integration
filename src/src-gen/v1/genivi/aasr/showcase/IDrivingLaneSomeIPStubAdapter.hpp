/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GENIVI_AASR_SHOWCASE_I_DRIVING_LANE_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GENIVI_AASR_SHOWCASE_I_DRIVING_LANE_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/genivi/aasr/showcase/IDrivingLaneStub.hpp>
#include <v1/genivi/aasr/showcase/IDrivingLaneSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace genivi {
namespace aasr {
namespace showcase {

template <typename _Stub = ::v1::genivi::aasr::showcase::IDrivingLaneStub, typename... _Stubs>
class IDrivingLaneSomeIPStubAdapterInternal
    : public virtual IDrivingLaneStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> IDrivingLaneSomeIPStubAdapterHelper;

    ~IDrivingLaneSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        IDrivingLaneSomeIPStubAdapterHelper::deinit();
    }

    void fireLaneDetectedEvent(const ::v1::genivi::aasr::showcase::IDrivingLane::LaneType& drivingLane);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::genivi::aasr::showcase::IDrivingLaneStub,
        CommonAPI::Version
    > getIDrivingLaneInterfaceVersionStubDispatcher;



    IDrivingLaneSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        IDrivingLaneSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< IDrivingLaneStub>(_stub))
    {

        

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x1), itsEventGroups, false);
        }
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::genivi::aasr::showcase::IDrivingLaneStub,
    CommonAPI::Version
    > IDrivingLaneSomeIPStubAdapterInternal<_Stub, _Stubs...>::getIDrivingLaneInterfaceVersionStubDispatcher(&IDrivingLaneStub::lockInterfaceVersionAttribute, &IDrivingLaneStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
void IDrivingLaneSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireLaneDetectedEvent(const ::v1::genivi::aasr::showcase::IDrivingLane::LaneType& _drivingLane) {
    CommonAPI::Deployable< IDrivingLane::LaneType, ::v1::genivi::aasr::showcase::IDrivingLane_::LaneTypeDeployment_t> deployed_drivingLane(_drivingLane, static_cast< ::v1::genivi::aasr::showcase::IDrivingLane_::LaneTypeDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::genivi::aasr::showcase::IDrivingLane::LaneType, ::v1::genivi::aasr::showcase::IDrivingLane_::LaneTypeDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x1),
            true,
             deployed_drivingLane 
    );
}

template <typename _Stub = ::v1::genivi::aasr::showcase::IDrivingLaneStub, typename... _Stubs>
class IDrivingLaneSomeIPStubAdapter
    : public IDrivingLaneSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< IDrivingLaneSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    IDrivingLaneSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          IDrivingLaneSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace showcase
} // namespace aasr
} // namespace genivi
} // namespace v1

#endif // V1_GENIVI_AASR_SHOWCASE_I_Driving_Lane_SOMEIP_STUB_ADAPTER_HPP_
